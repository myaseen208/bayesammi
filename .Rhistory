first_half <- C2_shuffled[, 1:3]
# Step 1: Extract first half (columns) and second half (rows) of C2_shuffled
first_half <- C2_shuffled[, 1:3]
second_half <- C2_shuffled[, 4:6]
# Step 2: Initialize P2.1 with correct dimensions and dimnames
P2.1 <- matrix(0, nrow = ncol(second_half), ncol = ncol(first_half),
dimnames = list(colnames(second_half), colnames(first_half)))
P2.1
# Step 3: Populate P2.1
for (col in seq_len(ncol(P2.1))) {
for (row in seq_len(nrow(P2.1))) {
# Column name and row name from P2.1
col_name <- colnames(P2.1)[col]
row_name <- rownames(P2.1)[row]
# Find the indices in P2 for the row and column names
P2_col_index <- which(colnames(P2) == col_name)
P2_row_index <- which(colnames(P2) == row_name)
# Check if both indices exist
if (length(P2_col_index) > 0 && length(P2_row_index) > 0) {
# Extract the value from P2
P2.1[row, col] <- P2[P2_row_index, P2_col_index]
} else {
# Handle missing indices gracefully
P2.1[row, col] <- NA
}
}
}
# Step 1: Extract first half (columns) and second half (rows) of C2_shuffled
first_half <- C2_shuffled[, 1:3, drop = FALSE]
second_half <- C2_shuffled[, 4:6, drop = FALSE]
# Step 2: Initialize P2.1 with correct dimensions and dimnames
P2.1 <- matrix(0, nrow = ncol(second_half), ncol = ncol(first_half),
dimnames = list(colnames(second_half), colnames(first_half)))
# Step 3: Populate P2.1
for (col in seq_len(ncol(P2.1))) {
for (row in seq_len(nrow(P2.1))) {
# Column name and row name from P2.1
col_name <- colnames(P2.1)[col]
row_name <- rownames(P2.1)[row]
# Find the indices in P2 for the row and column names
P2_col_index <- match(col_name, colnames(P2))
P2_row_index <- match(row_name, colnames(P2))
# Ensure indices are valid
if (!is.na(P2_col_index) && !is.na(P2_row_index)) {
# Extract the value from P2
P2.1[row, col] <- P2[P2_row_index, P2_col_index]
} else {
# Handle missing indices
P2.1[row, col] <- NA
}
}
}
# View the resulting P2.1
P2.1
# Step 1: Extract first half (columns) and second half (rows) of C2_shuffled
first_half <- C2_shuffled[, 1:3, drop = FALSE]
second_half <- C2_shuffled[, 4:6, drop = FALSE]
# Step 2: Initialize P2.1 with correct dimensions and dimnames
P2.1 <- matrix(0, nrow = ncol(second_half), ncol = ncol(first_half),
dimnames = list(colnames(second_half), colnames(first_half)))
# Step 3: Populate P2.1
for (col in seq_len(ncol(P2.1))) {
for (row in seq_len(nrow(P2.1))) {
# Column name and row name from P2.1
col_name <- colnames(P2.1)[col]
row_name <- rownames(P2.1)[row]
# Find the indices in P2 for the row and column names
P2_col_index <- match(col_name, colnames(P2))
P2_row_index <- match(row_name, colnames(P2))
# Check if the indices are valid and within bounds
if (!is.na(P2_col_index) && !is.na(P2_row_index)) {
# Safely extract the value from P2
P2.1[row, col] <- P2[P2_row_index, P2_col_index]
} else {
# Handle invalid indices gracefully
P2.1[row, col] <- NA
}
}
}
# View the resulting P2.1
P2.1
# Step 1: Extract first half (columns) and second half (rows) of C2_shuffled
first_half <- C2_shuffled[, 1:3, drop = FALSE]
second_half <- C2_shuffled[, 4:6, drop = FALSE]
# Step 2: Initialize P2.1 with correct dimensions and dimnames
P2.1 <- matrix(0, nrow = ncol(second_half), ncol = ncol(first_half),
dimnames = list(colnames(second_half), colnames(first_half)))
# Step 3: Populate P2.1
for (col in seq_len(ncol(P2.1))) {
for (row in seq_len(nrow(P2.1))) {
# Column name and row name from P2.1
col_name <- colnames(P2.1)[col]
row_name <- rownames(P2.1)[row]
# Find the indices in P2 for the row and column names
P2_col_index <- match(col_name, colnames(P2))
P2_row_index <- match(row_name, colnames(P2))
# Check if the indices are valid and within bounds
if (!is.na(P2_col_index) && !is.na(P2_row_index)) {
# Safely extract the value from P2
P2.1[row, col] <- P2[P2_row_index, P2_col_index]
} else {
# Handle invalid indices gracefully
P2.1[row, col] <- NA
}
}
}
# Step 1: Extract first half (columns) and second half (rows) of C2_shuffled
first_half <- C2_shuffled[, 1:3, drop = FALSE]
second_half <- C2_shuffled[, 4:6, drop = FALSE]
# Step 2: Initialize P2.1 with correct dimensions and dimnames
P2.1 <- matrix(0, nrow = ncol(second_half), ncol = ncol(first_half),
dimnames = list(colnames(second_half), colnames(first_half)))
# Step 3: Populate P2.1
for (col in seq_len(ncol(P2.1))) {
for (row in seq_len(nrow(P2.1))) {
# Column name and row name from P2.1
col_name <- colnames(P2.1)[col]
row_name <- rownames(P2.1)[row]
# Find the indices in P2 for the row and column names
P2_col_index <- match(col_name, colnames(P2))
P2_row_index <- match(row_name, colnames(P2))
# Ensure indices are within bounds
if (!is.na(P2_col_index) && !is.na(P2_row_index) &&
P2_row_index <= nrow(P2) && P2_col_index <= ncol(P2)) {
# Safely extract the value from P2
P2.1[row, col] <- P2[P2_row_index, P2_col_index]
} else {
# Handle invalid indices gracefully
P2.1[row, col] <- NA
}
}
}
# View the resulting P2.1
print(P2.1)
# Step 1: Extract first half (columns) and second half (rows) of C2_shuffled
first_half <- C2_shuffled[, 1:3, drop = FALSE]
second_half <- C2_shuffled[1:3, , drop = FALSE]
# Step 2: Initialize P2.1 with correct dimensions and dimnames
P2.1 <- matrix(0, nrow = nrow(second_half), ncol = ncol(first_half),
dimnames = list(rownames(second_half), colnames(first_half)))
# Step 3: Populate P2.1
for (col in seq_len(ncol(P2.1))) {
for (row in seq_len(nrow(P2.1))) {
# Column name and row name from P2.1
col_name <- colnames(P2.1)[col]
row_name <- rownames(P2.1)[row]
# Find the indices in P2 for the row and column names
P2_col_index <- match(col_name, colnames(P2))
P2_row_index <- match(row_name, colnames(P2))
# Extract the common element from P2
P2.1[row, col] <- P2[row, P2_col_index]
}
}
# View the resulting P2.1
print(P2.1)
matrix(
data = c(3, 2, 8
, 9, 4, 1
, 5, 7, 6)
, nrow = 3, ncol = 3, byrow = TRUE
, dimnames = list(paste0("P", 1:3), paste0("P", 1:3))
)
matrix(
data = c(3, 2, 8
, 9, 4, 1
, 5, 7, 6)
, nrow = 3, ncol = 3, byrow = TRUE
, dimnames = list(c("P1", "P2", "P5"), c("P3", "P4", "P6"))
)
# Step 1: Define row and column names for P2.1
P2.1_rows <- colnames(C2_shuffled)[4:6]  # Next three columns of C2_shuffled
P2.1_cols <- colnames(C2_shuffled)[1:3]  # First three columns of C2_shuffled
# Step 2: Initialize P2.1 matrix
P2.1 <- matrix(0, nrow = length(P2.1_rows), ncol = length(P2.1_cols),
dimnames = list(P2.1_rows, P2.1_cols))
# Step 3: Populate P2.1 from P2
for (i in seq_len(nrow(P2.1))) {
for (j in seq_len(ncol(P2.1))) {
# Row name and column name of P2.1
row_name <- P2.1_rows[i]
col_name <- P2.1_cols[j]
# Find the common element from P2 for the given row and column names
common_element <- P2[which(rownames(C2_shuffled) == row_name),
which(colnames(C2_shuffled) == col_name)]
# Assign to P2.1
P2.1[i, j] <- common_element
}
}
# Step 1: Define row and column names for P2.1
P2.1_rows <- colnames(C2_shuffled)[4:6]  # Next three columns of C2_shuffled
P2.1_cols <- colnames(C2_shuffled)[1:3]  # First three columns of C2_shuffled
# Step 2: Initialize P2.1 matrix
P2.1 <- matrix(0, nrow = length(P2.1_rows), ncol = length(P2.1_cols),
dimnames = list(P2.1_rows, P2.1_cols))
# Step 3: Populate P2.1 from P2
for (i in seq_len(nrow(P2.1))) {
for (j in seq_len(ncol(P2.1))) {
# Row name and column name of P2.1
row_name <- P2.1_rows[i]
col_name <- P2.1_cols[j]
# Find the corresponding indices in C2_shuffled
row_index <- match(row_name, rownames(C2_shuffled))
col_index <- match(col_name, colnames(C2_shuffled))
# Find the common element from P2
P2.1[i, j] <- P2[row_index, col_index]
}
}
# Step 1: Define row and column names for P2.1
P2.1_rows <- colnames(C2_shuffled)[4:6]  # Next three columns of C2_shuffled
P2.1_cols <- colnames(C2_shuffled)[1:3]  # First three columns of C2_shuffled
# Step 2: Initialize P2.1 matrix
P2.1 <- matrix(0, nrow = length(P2.1_rows), ncol = length(P2.1_cols),
dimnames = list(P2.1_rows, P2.1_cols))
# Step 3: Populate P2.1 from P2
for (i in seq_len(nrow(P2.1))) {
for (j in seq_len(ncol(P2.1))) {
# Row name and column name of P2.1
row_name <- P2.1_rows[i]
col_name <- P2.1_cols[j]
# Find the corresponding indices in C2_shuffled
row_index <- match(row_name, colnames(P2)) # Match row name with P2 columns
col_index <- match(col_name, colnames(P2)) # Match column name with P2 columns
# Check if indices are valid
if (!is.na(row_index) && !is.na(col_index)) {
P2.1[i, j] <- P2[row_index, col_index]
} else {
P2.1[i, j] <- NA  # Handle unmatched cases gracefully
}
}
}
# Step 1: Define row and column names for P2.1
P2.1_rows <- colnames(C2_shuffled)[4:6]  # Rows from the next three columns of C2_shuffled
P2.1_cols <- colnames(C2_shuffled)[1:3]  # Columns from the first three columns of C2_shuffled
# Step 2: Initialize P2.1 matrix
P2.1 <- matrix(0, nrow = length(P2.1_rows), ncol = length(P2.1_cols),
dimnames = list(P2.1_rows, P2.1_cols))
# Step 3: Populate P2.1 using P2
for (i in seq_len(nrow(P2.1))) {
for (j in seq_len(ncol(P2.1))) {
# Row name and column name of P2.1
row_name <- P2.1_rows[i]
col_name <- P2.1_cols[j]
# Match indices in P2
row_index <- which(colnames(P2) == row_name)
col_index <- which(colnames(P2) == col_name)
# Debugging output
if (length(row_index) == 0 || length(col_index) == 0) {
stop(paste("Invalid match for row:", row_name, "or column:", col_name))
}
# Assign value from P2 to P2.1
P2.1[i, j] <- P2[row_index, col_index]
}
}
# Step 1: Define row and column names for P2.1
P2.1_rows <- colnames(C2_shuffled)[4:6]  # Rows: Columns 4 to 6 in C2_shuffled
P2.1_cols <- colnames(C2_shuffled)[1:3]  # Columns: Columns 1 to 3 in C2_shuffled
# Step 2: Initialize P2.1 matrix
P2.1 <- matrix(0, nrow = length(P2.1_rows), ncol = length(P2.1_cols),
dimnames = list(P2.1_rows, P2.1_cols))
# Step 3: Populate P2.1 manually
for (i in seq_len(nrow(P2.1))) {
for (j in seq_len(ncol(P2.1))) {
# Extract row and column names
row_name <- P2.1_rows[i]
col_name <- P2.1_cols[j]
# Map names to indices in P2
row_index <- which(colnames(P2) == row_name)
col_index <- which(colnames(P2) == col_name)
# Check if indices are valid
if (length(row_index) == 0 || length(col_index) == 0) {
stop(sprintf("Invalid mapping: row '%s' or column '%s' not found in P2", row_name, col_name))
}
# Populate P2.1 from P2
P2.1[i, j] <- P2[row_index, col_index]
}
}
P2.1 <-
matrix(
data = c(3, 2, 8
, 9, 4, 1
, 5, 7, 6)
, nrow = 3, ncol = 3, byrow = TRUE
, dimnames = list(c("P1", "P2", "P5"), c("P3", "P4", "P6"))
)
P2
C2_shuffled
P2.1
# Extract row and column names for P2.1
P2.1_rows <- colnames(C2_shuffled)[4:6]  # Rows: Columns 4 to 6 in C2_shuffled
P2.1_cols <- colnames(C2_shuffled)[1:3]  # Columns: Columns 1 to 3 in C2_shuffled
# Initialize P2.1 matrix
P2.1 <- matrix(NA, nrow = length(P2.1_rows), ncol = length(P2.1_cols),
dimnames = list(P2.1_rows, P2.1_cols))
# Populate P2.1 matrix
for (row_name in P2.1_rows) {
for (col_name in P2.1_cols) {
# Find the indices in P2 for the current row and column names
row_index <- which(colnames(P2) == row_name)
col_index <- which(colnames(P2) == col_name)
# Populate the corresponding cell in P2.1
P2.1[row_name, col_name] <- P2[row_index, col_index]
}
}
# Extract row and column labels for P2.1
col_labels <- colnames(C2_shuffled)[1:(ncol(C2_shuffled) / 2)]  # First half
row_labels <- colnames(C2_shuffled)[(ncol(C2_shuffled) / 2 + 1):ncol(C2_shuffled)]  # Second half
# Initialize P2.1
P2.1 <- matrix(0, nrow = length(row_labels), ncol = length(col_labels),
dimnames = list(row_labels, col_labels))
# Populate P2.1
for (i in seq_len(nrow(P2.1))) {
for (j in seq_len(ncol(P2.1))) {
# Get row and column labels for current cell
row_label <- rownames(P2.1)[i]
col_label <- colnames(P2.1)[j]
# Find indices in P2 corresponding to row and column labels
row_index <- which(colnames(P2) == row_label)
col_index <- which(colnames(P2) == col_label)
# Populate the cell
P2.1[i, j] <- P2[row_index, col_index]
}
}
# View the resulting P2.1
P2.1
P2
C2_shuffled
P2
# Extract row and column labels for P2.1
col_labels <- colnames(C2_shuffled)[1:(ncol(C2_shuffled) / 2)]  # First half
row_labels <- colnames(C2_shuffled)[(ncol(C2_shuffled) / 2 + 1):ncol(C2_shuffled)]  # Second half
# Initialize P2.1
P2.1 <- matrix(0, nrow = length(row_labels), ncol = length(col_labels),
dimnames = list(row_labels, col_labels))
# Populate P2.1
for (i in seq_len(nrow(P2.1))) {
for (j in seq_len(ncol(P2.1))) {
# Get row and column labels for the current cell
row_label <- rownames(P2.1)[i]
col_label <- colnames(P2.1)[j]
# Find the corresponding columns in P2
row_column_in_P2 <- P2[, col_label, drop = FALSE]
col_column_in_P2 <- P2[, row_label, drop = FALSE]
# Find the common element
common_element <- intersect(row_column_in_P2, col_column_in_P2)
# Assign the common element to P2.1
P2.1[i, j] <- common_element
}
}
# View the resulting P2.1
P2.1
# Extract row and column labels for P2.1
col_labels <- colnames(C2_shuffled)[1:(ncol(C2_shuffled) / 2)]  # First half
row_labels <- colnames(C2_shuffled)[(ncol(C2_shuffled) / 2 + 1):ncol(C2_shuffled)]  # Second half
# Initialize P2.1
P2.1 <- matrix(0, nrow = length(row_labels), ncol = length(col_labels),
dimnames = list(row_labels, col_labels))
# Populate P2.1
for (i in seq_len(nrow(P2.1))) {
for (j in seq_len(ncol(P2.1))) {
# Get row and column labels for the current cell
row_label <- rownames(P2.1)[i]
col_label <- colnames(P2.1)[j]
# Find the corresponding columns in P2
row_column_in_P2 <- P2[, col_label, drop = FALSE]
col_column_in_P2 <- P2[, row_label, drop = FALSE]
# Find the common element
common_element <- intersect(row_column_in_P2, col_column_in_P2)
# Assign the common element to P2.1
P2.1[i, j] <- common_element
}
}
# View the resulting P2.1
P2.1
generate_matrix <- function(P1, C) {
# Extract row and column labels for the output matrix P
col_labels <- colnames(C)[1:(ncol(C) / 2)]  # First half
row_labels <- colnames(C)[(ncol(C) / 2 + 1):ncol(C)]  # Second half
# Initialize the output matrix P
P <- matrix(0, nrow = length(row_labels), ncol = length(col_labels),
dimnames = list(row_labels, col_labels))
# Populate P
for (i in seq_len(nrow(P))) {
for (j in seq_len(ncol(P))) {
# Get row and column labels for the current cell
row_label <- rownames(P)[i]
col_label <- colnames(P)[j]
# Find the corresponding columns in P1
row_column_in_P1 <- P1[, col_label, drop = FALSE]
col_column_in_P1 <- P1[, row_label, drop = FALSE]
# Find the common element
common_element <- intersect(row_column_in_P1, col_column_in_P1)
# Assign the common element to P
if (length(common_element) > 0) {
P[i, j] <- common_element
} else {
P[i, j] <- NA  # Handle cases with no common elements
}
}
}
return(P)
}
P2
generate_matrix(P1 = P2, C = C2_shuffled)
generate_matrix <- function(P_org, C) {
# Extract row and column labels for the output matrix P
col_labels <- colnames(C)[1:(ncol(C) / 2)]  # First half
row_labels <- colnames(C)[(ncol(C) / 2 + 1):ncol(C)]  # Second half
# Initialize the output matrix P
P <- matrix(0, nrow = length(row_labels), ncol = length(col_labels),
dimnames = list(row_labels, col_labels))
# Populate P
for (i in seq_len(nrow(P))) {
for (j in seq_len(ncol(P))) {
# Get row and column labels for the current cell
row_label <- rownames(P)[i]
col_label <- colnames(P)[j]
# Find the corresponding columns in P_org
row_column_in_P1 <- P_org[, col_label, drop = FALSE]
col_column_in_P1 <- P_org[, row_label, drop = FALSE]
# Find the common element
common_element <- intersect(row_column_in_P1, col_column_in_P1)
# Assign the common element to P
if (length(common_element) > 0) {
P[i, j] <- common_element
} else {
P[i, j] <- NA  # Handle cases with no common elements
}
}
}
return(P)
}
generate_matrix(P_org = P2, C = C2_shuffled)
?find.BIB
find.BIB(trt = 6, b = 9, k = 2)
find.BIB(trt = 6, b = 12, k = 2)
find.BIB(trt = 6, b = 15, k = 2)
find.BIB(trt = 6, b = 18, k = 2)
find.BIB(trt = 6, b = 9, k = 2)
find.BIB(trt = 6, b = 6, k = 2)
find.BIB(trt = 6, b = 8, k = 2)
M1 <- design_to_N(find.BIB(trt = 6, b = 12, k = 2))
apply(X = M1, MARGIN = 1, FUN = function(row) which(row == 1))
C1 <- tcrossprod(x = M1, y = M1)
C1
library(gtools)
# Function to calculate a similarity score between matrices
similarity_score <- function(C_target, C_test) {
sum(abs(C_target - C_test))
}
# Function to shuffle rows and columns of a matrix to match a target structure
n <- nrow(C_target)
best_permutation <- seq_len(n)
best_score <- similarity_score(C_target, C_test)
# Test all possible permutations of rows and columns
perms <- gtools::permutations(n, n)
library(gtools)
# Function to calculate a similarity score between matrices
similarity_score <- function(C_target, C_test) {
sum(abs(C_target - C_test))
}
# Function to shuffle rows and columns of a matrix to match a target structure
shuffle_matrix <- function(C_target, C_test, dimnames_test) {
n <- nrow(C_target)
best_permutation <- seq_len(n)
best_score <- similarity_score(C_target, C_test)
# Test all possible permutations of rows and columns
perms <- gtools::permutations(n, n)
for (perm in seq_len(nrow(perms))) {
permuted_C <- C_test[perms[perm, ], perms[perm, ]]
score <- similarity_score(C_target, permuted_C)
if (score < best_score) {
best_score <- score
best_permutation <- perms[perm, ]
}
}
# Apply the best permutation and update dimnames
permuted_C <- C_test[best_permutation, best_permutation]
rownames(permuted_C) <- colnames(permuted_C) <- dimnames_test[best_permutation]
permuted_C
)
library(gtools)
# Function to calculate a similarity score between matrices
similarity_score <- function(C_target, C_test) {
sum(abs(C_target - C_test))
}
# Function to shuffle rows and columns of a matrix to match a target structure
shuffle_matrix <- function(C_target, C_test, dimnames_test) {
n <- nrow(C_target)
best_permutation <- seq_len(n)
best_score <- similarity_score(C_target, C_test)
# Test all possible permutations of rows and columns
perms <- gtools::permutations(n, n)
for (perm in seq_len(nrow(perms))) {
permuted_C <- C_test[perms[perm, ], perms[perm, ]]
score <- similarity_score(C_target, permuted_C)
if (score < best_score) {
best_score <- score
best_permutation <- perms[perm, ]
}
}
# Apply the best permutation and update dimnames
permuted_C <- C_test[best_permutation, best_permutation]
rownames(permuted_C) <- colnames(permuted_C) <- dimnames_test[best_permutation]
permuted_C
}
dimnames(C1) <- list(paste0("P", 1:nrow(C1)), paste0("P", 1:nrow(C1)))
C1 <- tcrossprod(x = M1, y = M1)
C1
rowSums(C1)
colSums(C1)
M1
rowSums(M1)
